// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

    static Array ram;
    static Array heap;
    static int free;

    /** Initializes the class. */
    function void init() {
        let ram = 0;

        // Base address of Heap
        let heap = 2048;
        let free = 2048; // FreeList starts at heap base address 

        let heap[0] = 0; // next
        let heap[1] = 14334; // length, == 16384 - 2048 - 2 (overhead)

        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int sizeOfSpace, baseOfBlock;

        // corner cases
        if (size < 1) {
            do Output.printString("Size must be positive");
            do Sys.error(3);
        }
        
        // overhead -> pointer and size
        let sizeOfSpace = heap[free + 1];

        while ( sizeOfSpace < (size + 2) ) {
            if (free > 16383) {
                do Output.printString("No more space on heap");
                do Sys.error(3);
            }
            
            let free = heap[free];
            let sizeOfSpace = heap[free + 1]; 
        }
        // places on the 'end' 
        let baseOfBlock = free + 2 + sizeOfSpace - size;

        let heap[ baseOfBlock - 1 ] = size;
        let heap[ free + 1 ] = sizeOfSpace - (size + 2);

        return heap + baseOfBlock;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int base;

        let base = o - 2 - heap;

        let heap[ base ] = free;
        // assigned to the head of free list
        let free = base;
        return;
    }    
}
